

#### Autogenerated code, see generators/backend.py

%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin, BitwiseBuiltin
from starkware.starknet.common.syscalls import get_caller_address
from starkware.starknet.common.syscalls import call_contract, delegate_l1_handler, delegate_call

from contracts.backend_proxy import (
    Proxy_implementation_address,

    _constructor,
    setImplementation,

    _onlyAdmin,
    _onlyAdminAnd,

    __default__,
)

####################
####################
####################
# Backend proxies don't delegate the calls, but instead call.
# This is because the backend proxy handles authorization,
# the actual backend contract only checks that its caller is the proxy.

@constructor
func constructor{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (owner: felt):
    _constructor(owner)
    return ()
end

####################
####################
####################
# Forwarded calls


@storage_var
func _mint_contract() -> (address: felt):
end

@external
func setMintContract{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (address: felt):
    _onlyAdmin()
    _mint_contract.write(address)
    return ()
end


@view
func getMintContract{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } () -> (address: felt):
    let (addr) = _mint_contract.read()
    return (addr)
end

func _onlyAdminAndMintContract{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } ():
    let (address) = _mint_contract.read()
    _onlyAdminAnd(address)
    return ()
end


from contracts.types import (FTSpec)

@contract_interface
namespace ProxiedInterface:
    func ownerOf(token_id: felt):
    end
    func setProxyAddress(address: felt):
    end
    func setSetBackendAddress(address: felt):
    end
    func mintFT(owner: felt, material: felt, qty: felt):
    end
    func mintOneNFT(owner: felt, material: felt, uid: felt):
    end
    func transferFT(sender: felt, recipient: felt, material: felt, qty: felt):
    end
    func transferOneNFT(sender: felt, recipient: felt, material: felt, briq_token_id: felt):
    end
    func transferNFT(sender: felt, recipient: felt, material: felt, nfts_len: felt, nfts: felt*):
    end
    func mutateFT(owner: felt, source_material: felt, target_material: felt, qty: felt):
    end
    func mutateOneNFT(owner: felt, source_material: felt, target_material: felt, uid: felt, new_uid: felt):
    end
end


@external
func setProxyAddress{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (address: felt):
    alloc_locals
    _onlyAdminAnd(address)

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.setProxyAddress(address, address)
    return ()
end

@external
func setSetBackendAddress{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (address: felt):
    alloc_locals
    _onlyAdminAnd(address)

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.setSetBackendAddress(address, address)
    return ()
end

@external
@raw_input
@raw_output
func balanceOf{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr
    } (selector: felt, calldata_size: felt, calldata: felt*) -> (retdata_size: felt,retdata: felt*):
    let (address) = Proxy_implementation_address.read()
    let (retdata_size: felt, retdata: felt*) = call_contract(contract_address=address, function_selector=selector, calldata_size=calldata_size, calldata=calldata)
    return (retdata_size=retdata_size, retdata=retdata)
end

@external
@raw_input
@raw_output
func balanceDetailsOf{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr
    } (selector: felt, calldata_size: felt, calldata: felt*) -> (retdata_size: felt,retdata: felt*):
    let (address) = Proxy_implementation_address.read()
    let (retdata_size: felt, retdata: felt*) = call_contract(contract_address=address, function_selector=selector, calldata_size=calldata_size, calldata=calldata)
    return (retdata_size=retdata_size, retdata=retdata)
end

@external
@raw_input
@raw_output
func tokenOfOwnerByIndex{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr
    } (selector: felt, calldata_size: felt, calldata: felt*) -> (retdata_size: felt,retdata: felt*):
    let (address) = Proxy_implementation_address.read()
    let (retdata_size: felt, retdata: felt*) = call_contract(contract_address=address, function_selector=selector, calldata_size=calldata_size, calldata=calldata)
    return (retdata_size=retdata_size, retdata=retdata)
end

@external
@raw_input
@raw_output
func ownerOf{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr
    } (selector: felt, calldata_size: felt, calldata: felt*) -> (retdata_size: felt,retdata: felt*):
    let (address) = Proxy_implementation_address.read()
    let (retdata_size: felt, retdata: felt*) = call_contract(contract_address=address, function_selector=selector, calldata_size=calldata_size, calldata=calldata)
    return (retdata_size=retdata_size, retdata=retdata)
end

@external
@raw_input
@raw_output
func totalSupply{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr
    } (selector: felt, calldata_size: felt, calldata: felt*) -> (retdata_size: felt,retdata: felt*):
    let (address) = Proxy_implementation_address.read()
    let (retdata_size: felt, retdata: felt*) = call_contract(contract_address=address, function_selector=selector, calldata_size=calldata_size, calldata=calldata)
    return (retdata_size=retdata_size, retdata=retdata)
end

@external
func mintFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (owner: felt, material: felt, qty: felt):
    alloc_locals
    _onlyAdminAndMintContract()

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.mintFT(address, owner, material, qty)
    return ()
end

@external
func mintOneNFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (owner: felt, material: felt, uid: felt):
    alloc_locals
    _onlyAdminAndMintContract()

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.mintOneNFT(address, owner, material, uid)
    return ()
end

@external
func transferFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (sender: felt, recipient: felt, material: felt, qty: felt):
    alloc_locals
    _onlyAdminAnd(sender)

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.transferFT(address, sender, recipient, material, qty)
    return ()
end

@external
func transferOneNFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (sender: felt, recipient: felt, material: felt, briq_token_id: felt):
    alloc_locals
    _onlyAdminAnd(sender)

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.transferOneNFT(address, sender, recipient, material, briq_token_id)
    return ()
end

@external
func transferNFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (sender: felt, recipient: felt, material: felt, nfts_len: felt, nfts: felt*):
    alloc_locals
    _onlyAdminAnd(sender)

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.transferNFT(address, sender, recipient, material, nfts_len, nfts)
    return ()
end

@external
func mutateFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (owner: felt, source_material: felt, target_material: felt, qty: felt):
    alloc_locals
    _onlyAdmin()

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.mutateFT(address, owner, source_material, target_material, qty)
    return ()
end

@external
func mutateOneNFT{
        syscall_ptr: felt*,
        pedersen_ptr: HashBuiltin*,
        range_check_ptr
    } (owner: felt, source_material: felt, target_material: felt, uid: felt, new_uid: felt):
    alloc_locals
    _onlyAdmin()

    let (address) = Proxy_implementation_address.read()

    ProxiedInterface.mutateOneNFT(address, owner, source_material, target_material, uid, new_uid)
    return ()
end

    
